<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[random thoughts]]></title>
  <link href="http://yinyunqiao.github.io/atom.xml" rel="self"/>
  <link href="http://yinyunqiao.github.io/"/>
  <updated>2013-09-17T22:18:39+10:00</updated>
  <id>http://yinyunqiao.github.io/</id>
  <author>
    <name><![CDATA[Yunqiao Yin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Implement a simple trie in C++]]></title>
    <link href="http://yinyunqiao.github.io/blog/2013/09/17/implement-a-simple-trie-in-c-plus-plus/"/>
    <updated>2013-09-17T10:38:00+10:00</updated>
    <id>http://yinyunqiao.github.io/blog/2013/09/17/implement-a-simple-trie-in-c-plus-plus</id>
    <content type="html"><![CDATA[<p>The following introduction is copied from <a href="http://en.wikipedia.org/wiki/Trie">Wikipedia</a>:</p>

<blockquote>
  <p>In computer science, a trie, also called digital tree or sometimes radix tree or prefix tree 
(as they can be searched by prefixes), is an ordered tree data structure that is used to store
a dynamic set or associative array where the keys are usually strings. </p>
</blockquote>

<p>Trie is a good choice for <a href="http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=89F5C5F504C452DFA838F1E4AD659D7C?doi=10.1.1.57.2897&amp;rep=rep1&amp;type=pdf">bioinformatic applications (for DNA sequence alighment)</a>.
Also because trie supports ordered traversal, outputing all keys in the trie is actually a pre-order traversal.
So obviously trie can be used for sorting, for example <a href="http://en.wikipedia.org/wiki/Burstsort">Burstsort</a>, it’s even faster than <a href="http://en.wikipedia.org/wiki/Quicksort">quicksort</a> for
large data sets ( Worst case: <script type="math/tex"> O(n\log(n)) </script> ).</p>

<p>A simple trie tree looks like (for “hello world trie”):</p>

<div class="graphviz-wrapper">

<!-- Generated by graphviz version 2.34.0 (20130917.1038)
 -->
<!-- Title: non&#45;directed graph Pages: 1 -->
<svg role="img" aria-label="non-directed graph" width="89pt" height="188pt" viewbox="0.00 0.00 89.00 188.00">
<title>non-directed graph</title>
<desc>graph &quot;non-directed graph&quot; { 
a &#8211; b
b &#8211; c
c &#8211; a
 }</desc>

<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 184)">
<title>non&#45;directed graph</title>
<polygon fill="white" stroke="white" points="-4,4 -4,-184 85,-184 85,4 -4,4" />
<!-- a -->
<g id="node1" class="node"><title>a</title>
<ellipse fill="none" stroke="black" cx="54" cy="-162" rx="27" ry="18" />
<text text-anchor="middle" x="54" y="-156.4" font-family="Times,serif" font-size="14.00">a</text>
</g>
<!-- b -->
<g id="node2" class="node"><title>b</title>
<ellipse fill="none" stroke="black" cx="27" cy="-90" rx="27" ry="18" />
<text text-anchor="middle" x="27" y="-84.4" font-family="Times,serif" font-size="14.00">b</text>
</g>
<!-- a&#45;&#45;b -->
<g id="edge1" class="edge"><title>a&#45;&#45;b</title>
<path fill="none" stroke="black" d="M47.6014,-144.411C43.3597,-133.414 37.8106,-119.027 33.5403,-107.956" />
</g>
<!-- c -->
<g id="node3" class="node"><title>c</title>
<ellipse fill="none" stroke="black" cx="54" cy="-18" rx="27" ry="18" />
<text text-anchor="middle" x="54" y="-12.4" font-family="Times,serif" font-size="14.00">c</text>
</g>
<!-- b&#45;&#45;c -->
<g id="edge2" class="edge"><title>b&#45;&#45;c</title>
<path fill="none" stroke="black" d="M33.3986,-72.411C37.6403,-61.4141 43.1894,-47.0274 47.4597,-35.9562" />
</g>
<!-- c&#45;&#45;a -->
<g id="edge3" class="edge"><title>c&#45;&#45;a</title>
<path fill="none" stroke="black" d="M57.6538,-36.0925C59.6758,-46.4315 61.9808,-59.9098 63,-72 64.3441,-87.9434 64.3441,-92.0566 63,-108 61.9808,-120.09 59.6758,-133.569 57.6538,-143.908" />
</g>
</g>
</svg>
</div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>naive trie implementation </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="cp">#include &lt;string&gt;</span>
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line"><span class="k">class</span> <span class="nc">node</span> <span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">	<span class="n">node</span><span class="p">()</span> <span class="o">:</span> <span class="n">is_word</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="n">memset</span><span class="p">(</span><span class="n">children</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">children</span><span class="p">));</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="n">node</span> <span class="o">*</span><span class="n">children</span><span class="p">[</span><span class="mi">26</span><span class="p">];</span>
</span><span class="line">	<span class="kt">bool</span> <span class="n">is_word</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="k">class</span> <span class="nc">trie</span> <span class="p">{</span>
</span><span class="line">	<span class="n">node</span> <span class="o">*</span><span class="n">root</span><span class="p">;</span>
</span><span class="line">	<span class="n">trie</span><span class="p">()</span> <span class="o">:</span> <span class="n">root</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{}</span>
</span><span class="line">	<span class="kt">void</span> <span class="n">insert</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">root</span><span class="p">)</span>
</span><span class="line">			<span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="n">node</span><span class="p">;</span>
</span><span class="line">		<span class="n">node</span> <span class="o">*</span><span class="n">loc</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
</span><span class="line">		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">str</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">			<span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;a&#39;</span><span class="p">;</span>
</span><span class="line">			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">loc</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">				<span class="n">loc</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">node</span><span class="p">;</span>
</span><span class="line">			<span class="p">}</span>
</span><span class="line">			<span class="n">loc</span> <span class="o">=</span> <span class="n">loc</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">		<span class="n">loc</span><span class="o">-&gt;</span><span class="n">is_word</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="kt">bool</span> <span class="n">search</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="n">node</span> <span class="o">*</span><span class="n">loc</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
</span><span class="line">		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">str</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">			<span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;a&#39;</span><span class="p">;</span>
</span><span class="line">			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">loc</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class="line">			<span class="n">loc</span> <span class="o">=</span> <span class="n">loc</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">		<span class="k">return</span> <span class="n">loc</span><span class="o">-&gt;</span><span class="n">is_word</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="follow-ups">Follow-ups</h2>
<ol>
  <li>tripple array trie</li>
  <li>double array trie</li>
  <li>http://en.wikipedia.org/wiki/Ternary_search_tree</li>
  <li>Succinct Data Structures http://stevehanov.ca/blog/index.php?id=120</li>
  <li>http://en.wikipedia.org/wiki/BK-tree    spell checking</li>
  <li>http://en.wikipedia.org/wiki/Patricia_tree</li>
</ol>

<h2 id="references">References</h2>
<ol>
  <li><a href="http://wenku.baidu.com/view/71e82437f111f18583d05a54.html">http://wenku.baidu.com/view/71e82437f111f18583d05a54.html</a></li>
  <li><a href="http://linux.thai.net/~thep/datrie/datrie.html">http://linux.thai.net/~thep/datrie/datrie.html</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
