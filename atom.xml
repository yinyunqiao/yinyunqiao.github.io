<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[random thoughts]]></title>
  <link href="http://yinyunqiao.github.io/atom.xml" rel="self"/>
  <link href="http://yinyunqiao.github.io/"/>
  <updated>2013-09-17T23:48:53+10:00</updated>
  <id>http://yinyunqiao.github.io/</id>
  <author>
    <name><![CDATA[Yunqiao Yin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Implement a simple trie in C++]]></title>
    <link href="http://yinyunqiao.github.io/blog/2013/09/17/implement-a-simple-trie-in-c-plus-plus/"/>
    <updated>2013-09-17T10:38:00+10:00</updated>
    <id>http://yinyunqiao.github.io/blog/2013/09/17/implement-a-simple-trie-in-c-plus-plus</id>
    <content type="html"><![CDATA[<p>The following introduction is copied from <a href="http://en.wikipedia.org/wiki/Trie">Wikipedia</a>:</p>

<blockquote>
  <p>In computer science, a trie, also called digital tree or sometimes radix tree or prefix tree 
(as they can be searched by prefixes), is an ordered tree data structure that is used to store
a dynamic set or associative array where the keys are usually strings. </p>
</blockquote>

<p>Trie is a good choice for <a href="http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=89F5C5F504C452DFA838F1E4AD659D7C?doi=10.1.1.57.2897&amp;rep=rep1&amp;type=pdf">bioinformatic applications (for DNA sequence alighment)</a>.
Also because trie supports ordered traversal, outputing all keys in the trie is actually a pre-order traversal.
So obviously trie can be used for sorting, for example <a href="http://en.wikipedia.org/wiki/Burstsort">Burstsort</a>, itâ€™s even faster than <a href="http://en.wikipedia.org/wiki/Quicksort">quicksort</a> for
large data sets ( Worst case: <script type="math/tex"> O(n\log(n)) </script> ).</p>

<p>A simple trie tree looks like:</p>

<div class="graphviz-wrapper">

<!-- Generated by graphviz version 2.34.0 (20130917.1038)
 -->
<!-- Title: Graphviz Pages: 1 -->
<svg role="img" aria-label="" width="242pt" height="314pt" viewbox="0.00 0.00 242.00 314.00">
<title />
<desc>digraph &quot;Graphviz&quot; { 
  root [label=&quot; &quot;]
  inn [color=red]
  to [color=red]
  tea [color=red]
  ten [color=red]
  root -&gt; i [label=i]
  root -&gt; t [label=t]
  i -&gt; in [label=n]
  in -&gt; inn [label=n]
  t -&gt; to [label=o]
  t -&gt; te [label=e]
  te -&gt; tea [label=a]
  te -&gt; ten [label=n]
 }</desc>

<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 310)">
<title>Graphviz</title>
<polygon fill="white" stroke="white" points="-4,4 -4,-310 238,-310 238,4 -4,4" />
<!-- root -->
<g id="node1" class="node"><title>root</title>
<ellipse fill="none" stroke="black" cx="68" cy="-288" rx="27" ry="18" />
<text text-anchor="middle" x="68" y="-282.4" font-family="Times,serif" font-size="14.00"> </text>
</g>
<!-- i -->
<g id="node6" class="node"><title>i</title>
<ellipse fill="none" stroke="black" cx="27" cy="-198" rx="27" ry="18" />
<text text-anchor="middle" x="27" y="-192.4" font-family="Times,serif" font-size="14.00">i</text>
</g>
<!-- root&#45;&gt;i -->
<g id="edge1" class="edge"><title>root&#45;&gt;i</title>
<path fill="none" stroke="black" d="M60.2882,-270.448C54.2752,-257.542 45.8182,-239.39 38.9331,-224.613" />
<polygon fill="black" stroke="black" points="42.073,-223.064 34.6772,-215.478 35.7279,-226.021 42.073,-223.064" />
<text text-anchor="middle" x="53.9448" y="-237.4" font-family="Times,serif" font-size="14.00">i</text>
</g>
<!-- t -->
<g id="node7" class="node"><title>t</title>
<ellipse fill="none" stroke="black" cx="99" cy="-198" rx="27" ry="18" />
<text text-anchor="middle" x="99" y="-192.4" font-family="Times,serif" font-size="14.00">t</text>
</g>
<!-- root&#45;&gt;t -->
<g id="edge2" class="edge"><title>root&#45;&gt;t</title>
<path fill="none" stroke="black" d="M73.9771,-270.033C78.4658,-257.291 84.6942,-239.61 89.814,-225.076" />
<polygon fill="black" stroke="black" points="93.1249,-226.212 93.1464,-215.617 86.5225,-223.886 93.1249,-226.212" />
<text text-anchor="middle" x="88.9448" y="-237.4" font-family="Times,serif" font-size="14.00">t</text>
</g>
<!-- inn -->
<g id="node2" class="node"><title>inn</title>
<ellipse fill="none" stroke="red" cx="27" cy="-18" rx="27" ry="18" />
<text text-anchor="middle" x="27" y="-12.4" font-family="Times,serif" font-size="14.00">inn</text>
</g>
<!-- to -->
<g id="node3" class="node"><title>to</title>
<ellipse fill="none" stroke="red" cx="99" cy="-108" rx="27" ry="18" />
<text text-anchor="middle" x="99" y="-102.4" font-family="Times,serif" font-size="14.00">to</text>
</g>
<!-- tea -->
<g id="node4" class="node"><title>tea</title>
<ellipse fill="none" stroke="red" cx="135" cy="-18" rx="27" ry="18" />
<text text-anchor="middle" x="135" y="-12.4" font-family="Times,serif" font-size="14.00">tea</text>
</g>
<!-- ten -->
<g id="node5" class="node"><title>ten</title>
<ellipse fill="none" stroke="red" cx="207" cy="-18" rx="27" ry="18" />
<text text-anchor="middle" x="207" y="-12.4" font-family="Times,serif" font-size="14.00">ten</text>
</g>
<!-- in -->
<g id="node8" class="node"><title>in</title>
<ellipse fill="none" stroke="black" cx="27" cy="-108" rx="27" ry="18" />
<text text-anchor="middle" x="27" y="-102.4" font-family="Times,serif" font-size="14.00">in</text>
</g>
<!-- i&#45;&gt;in -->
<g id="edge3" class="edge"><title>i&#45;&gt;in</title>
<path fill="none" stroke="black" d="M27,-179.614C27,-167.24 27,-150.369 27,-136.22" />
<polygon fill="black" stroke="black" points="30.5001,-136.05 27,-126.05 23.5001,-136.05 30.5001,-136.05" />
<text text-anchor="middle" x="30.5" y="-147.4" font-family="Times,serif" font-size="14.00">n</text>
</g>
<!-- t&#45;&gt;to -->
<g id="edge5" class="edge"><title>t&#45;&gt;to</title>
<path fill="none" stroke="black" d="M99,-179.614C99,-167.24 99,-150.369 99,-136.22" />
<polygon fill="black" stroke="black" points="102.5,-136.05 99,-126.05 95.5001,-136.05 102.5,-136.05" />
<text text-anchor="middle" x="102.5" y="-147.4" font-family="Times,serif" font-size="14.00">o</text>
</g>
<!-- te -->
<g id="node9" class="node"><title>te</title>
<ellipse fill="none" stroke="black" cx="171" cy="-108" rx="27" ry="18" />
<text text-anchor="middle" x="171" y="-102.4" font-family="Times,serif" font-size="14.00">te</text>
</g>
<!-- t&#45;&gt;te -->
<g id="edge6" class="edge"><title>t&#45;&gt;te</title>
<path fill="none" stroke="black" d="M111.541,-181.672C122.692,-168.043 139.16,-147.916 151.939,-132.296" />
<polygon fill="black" stroke="black" points="154.979,-134.109 158.602,-124.153 149.561,-129.676 154.979,-134.109" />
<text text-anchor="middle" x="145.107" y="-147.4" font-family="Times,serif" font-size="14.00">e</text>
</g>
<!-- in&#45;&gt;inn -->
<g id="edge4" class="edge"><title>in&#45;&gt;inn</title>
<path fill="none" stroke="black" d="M27,-89.614C27,-77.2403 27,-60.3686 27,-46.2198" />
<polygon fill="black" stroke="black" points="30.5001,-46.0504 27,-36.0504 23.5001,-46.0504 30.5001,-46.0504" />
<text text-anchor="middle" x="30.5" y="-57.4" font-family="Times,serif" font-size="14.00">n</text>
</g>
<!-- te&#45;&gt;tea -->
<g id="edge7" class="edge"><title>te&#45;&gt;tea</title>
<path fill="none" stroke="black" d="M164.229,-90.4479C158.999,-77.6648 151.665,-59.7355 145.651,-45.0357" />
<polygon fill="black" stroke="black" points="148.767,-43.4081 141.741,-35.4779 142.288,-46.0586 148.767,-43.4081" />
<text text-anchor="middle" x="160.107" y="-57.4" font-family="Times,serif" font-size="14.00">a</text>
</g>
<!-- te&#45;&gt;ten -->
<g id="edge8" class="edge"><title>te&#45;&gt;ten</title>
<path fill="none" stroke="black" d="M177.771,-90.4479C183.001,-77.6648 190.335,-59.7355 196.349,-45.0357" />
<polygon fill="black" stroke="black" points="199.712,-46.0586 200.259,-35.4779 193.233,-43.4081 199.712,-46.0586" />
<text text-anchor="middle" x="196.5" y="-57.4" font-family="Times,serif" font-size="14.00">n</text>
</g>
</g>
</svg>
</div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>naive trie implementation </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="cp">#include &lt;string&gt;</span>
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line"><span class="k">class</span> <span class="nc">node</span> <span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">	<span class="n">node</span><span class="p">()</span> <span class="o">:</span> <span class="n">is_word</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="n">memset</span><span class="p">(</span><span class="n">children</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">children</span><span class="p">));</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="n">node</span> <span class="o">*</span><span class="n">children</span><span class="p">[</span><span class="mi">26</span><span class="p">];</span>
</span><span class="line">	<span class="kt">bool</span> <span class="n">is_word</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="k">class</span> <span class="nc">trie</span> <span class="p">{</span>
</span><span class="line">	<span class="n">node</span> <span class="o">*</span><span class="n">root</span><span class="p">;</span>
</span><span class="line">	<span class="n">trie</span><span class="p">()</span> <span class="o">:</span> <span class="n">root</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{}</span>
</span><span class="line">	<span class="kt">void</span> <span class="n">insert</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">root</span><span class="p">)</span>
</span><span class="line">			<span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="n">node</span><span class="p">;</span>
</span><span class="line">		<span class="n">node</span> <span class="o">*</span><span class="n">loc</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
</span><span class="line">		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">str</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">			<span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;a&#39;</span><span class="p">;</span>
</span><span class="line">			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">loc</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">				<span class="n">loc</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">node</span><span class="p">;</span>
</span><span class="line">			<span class="p">}</span>
</span><span class="line">			<span class="n">loc</span> <span class="o">=</span> <span class="n">loc</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">		<span class="n">loc</span><span class="o">-&gt;</span><span class="n">is_word</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="kt">bool</span> <span class="n">search</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="n">node</span> <span class="o">*</span><span class="n">loc</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
</span><span class="line">		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">str</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">			<span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;a&#39;</span><span class="p">;</span>
</span><span class="line">			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">loc</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class="line">			<span class="n">loc</span> <span class="o">=</span> <span class="n">loc</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">		<span class="k">return</span> <span class="n">loc</span><span class="o">-&gt;</span><span class="n">is_word</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="follow-ups">Follow-ups</h2>
<ol>
  <li>tripple array trie</li>
  <li>double array trie</li>
  <li>http://en.wikipedia.org/wiki/Ternary_search_tree</li>
  <li>Succinct Data Structures http://stevehanov.ca/blog/index.php?id=120</li>
  <li>http://en.wikipedia.org/wiki/BK-tree    spell checking</li>
  <li>http://en.wikipedia.org/wiki/Patricia_tree</li>
</ol>

<h2 id="references">References</h2>
<ol>
  <li><a href="http://wenku.baidu.com/view/71e82437f111f18583d05a54.html">http://wenku.baidu.com/view/71e82437f111f18583d05a54.html</a></li>
  <li><a href="http://linux.thai.net/~thep/datrie/datrie.html">http://linux.thai.net/~thep/datrie/datrie.html</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
