<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: suffix_tree | random thoughts]]></title>
  <link href="http://yinyunqiao.github.io/tags/suffix-tree/atom.xml" rel="self"/>
  <link href="http://yinyunqiao.github.io/"/>
  <updated>2013-09-19T10:31:37+10:00</updated>
  <id>http://yinyunqiao.github.io/</id>
  <author>
    <name><![CDATA[Yunqiao Yin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[suffix tree]]></title>
    <link href="http://yinyunqiao.github.io/blog/2013/09/18/suffix-tree/"/>
    <updated>2013-09-18T13:55:00+10:00</updated>
    <id>http://yinyunqiao.github.io/blog/2013/09/18/suffix-tree</id>
    <content type="html"><![CDATA[<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>generalized suffix tree </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">node</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">node</span> <span class="o">*</span><span class="n">suffix</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">struct</span> <span class="n">edge</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">string</span> <span class="n">label</span><span class="p">;</span>
</span><span class='line'>	<span class="n">node</span> <span class="o">*</span><span class="n">dest_node</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">class</span> <span class="nc">generalized_suffix_tree</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="n">generalized_suffix_tree</span><span class="p">()</span> <span class="o">:</span> <span class="n">last_index</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">root</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">last_leaf</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>	<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">search</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">word</span><span class="p">);</span><span class="o">&lt;/</span><span class="kt">int</span><span class="o">&gt;&lt;/</span><span class="n">vector</span><span class="o">&gt;&lt;/</span><span class="n">iostream</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span><span class="o">:</span>
</span><span class='line'>	<span class="n">node</span> <span class="o">*</span><span class="n">search_node</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">word</span><span class="p">);</span>
</span><span class='line'>	<span class="kt">int</span> <span class="n">last_index</span><span class="p">;</span>
</span><span class='line'>	<span class="n">node</span> <span class="o">*</span><span class="n">root</span><span class="p">;</span>
</span><span class='line'>	<span class="n">node</span> <span class="o">*</span><span class="n">last_leaf</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="follow-ups-and-references">Follow-ups and references</h2>
<ol>
  <li><a href="http://en.wikipedia.org/wiki/Suffix_array">Suffix array</a> is a depth-first traversal result of a suffix tree</li>
  <li><a href="http://en.wikipedia.org/wiki/LCP_array">LCP array</a> longest common prefix array</li>
</ol>

]]></content>
  </entry>
  
</feed>
